void setBuildStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Ana3Lu/ProyectoFinalSF.git"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}

pipeline {
    agent any

    tools {
        jdk 'JDK 17'

    }

    environment {
        DOCKERHUB_REPO = 'julizzy/zoo'
        DOCKERHUB_CREDENTIALS_ID = 'dcde267c-65cd-49a2-b04a-5b46e0ba17c9'
    }

    stages {
        stage('Git') {
            steps {
                setBuildStatus("Build in progress", "PENDING");
                script {
                    try {
                        checkout scm
                    } catch (Exception e) {
                        error "Failed to clone repository: ${e.message}"
                    }
                }
            }
        }

        stage('Check Java Version') {
            steps {
                sh 'java -version'  // Verifica la versión de Java
                sh 'echo $JAVA_HOME'  // Verifica la configuración de JAVA_HOME
            }
        }

        stage('Set permissions') {
            steps {
                sh 'chmod +x demo/gradlew'
            }
        }

        stage('Build') {
            steps {
                dir('demo') { // Navigate to the correct directory
                    script {
                        env.JAVA_HOME = tool name: 'JDK 17'
                        sh "${env.JAVA_HOME}/bin/java -version"
                    }
                    sh './gradlew clean build'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('demo') { // Continue in the correct directory
                    withSonarQubeEnv('SonarQubeServer') {
                        sh './gradlew sonar'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${DOCKERHUB_REPO}:${env.BUILD_NUMBER}")
                    sh "docker image"
                }
            }
        }

        stage('Trivy verification') {
            steps {
                script {
                    sh """
                    docker run -u root -v $HOME/Library/Caches:/root/.cache/ -v /var/run/docker.sock:/var/run/docker.sock --name trivy_scan aquasec/trivy image --scanners vuln --severity CRITICAL --exit-code 1 ${DOCKERHUB_REPO}:${env.BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS_ID) {
                        echo 'Logged in to DockerHub'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def image = docker.image("${DOCKERHUB_REPO}:${env.BUILD_NUMBER}")
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS_ID) {
                        image.push()
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh "docker rmi ${DOCKERHUB_REPO}:${env.BUILD_NUMBER} || true"
                sh 'docker rm -f trivy_scan || true'
            }
        }
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}